# TODO: submodule mbedmicro repo directly
# TODO: autodetect target directories based on input target configuration
# SConscript hierarchical build file for the mbed library.
#
# Provides a static library called 'mbed'.
#
# Usage:
# mbed = SConscript('SConscript-mbed', exports=['env', 'mbed_dir', 'mbed_device']
#
# Inputs:
# - env: properly configured C++ build environment for your platform (like
#   env['CXX'] = 'arm-none-eabi-g++').
# - mbed_dir: directory to the mbed library (like 'mbed/libraries/mbed/' if
#   directly using the mbedmicro/mbed repository.
# - mbed_device_path: path to the device drivers as a ordered list, like
#   ['Freescale', 'KLXX', 'KL05Z'] for the FRDM-KL05Z board.
#
# Returns:
# - a tuple:
#   elt 0: a static library to be included in your program.
#   elt 1: a list of header include directories.

Import('env', 'mbed_dir', 'mbed_device_path')

env = env.Clone()

# Header include paths for mbed, independent of device.
header_paths = [
    'api/',
    'common/',
    'hal/',
    'targets/cmsis/',
]

# Header include paths which need device-specific subpaths appended
device_header_paths = [
    'targets/cmsis/',
    'targets/hal/',
]

# Prefix mbed_dir to header_paths
header_paths = [mbed_dir + header_path for header_path in header_paths]
device_header_paths = [mbed_dir + header_path for header_path in device_header_paths]

# TODO: use os.path.join?
# Generate all device-specific paths
device_path = ''
for path_elt in mbed_device_path:
  device_path += 'TARGET_' + path_elt + '/'
  for device_header_path in device_header_paths:
    header_paths.append(device_header_path + device_path)
# ... and wildcard the final path to catch funny things like TOOLCHAIN_GCC_ARM
device_path += '*/'
for device_header_path in device_header_paths:
    header_paths.append(device_header_path + device_path)

env.Append(CPPPATH=header_paths)

# Glob all sources in the header paths
all_sources = []
for header_path in header_paths:
  all_sources.extend(Glob(header_path + '*.c'))
  all_sources.extend(Glob(header_path + '*.cpp'))
  all_sources.extend(Glob(header_path + '*.S'))

lib = env.StaticLibrary('mbed', all_sources)
rtn = (lib, header_paths)

Return('rtn')
